diff -durpN php-7.0.33.orig/ext/session/mod_files.c php-7.0.33/ext/session/mod_files.c
--- php-7.0.33.orig/ext/session/mod_files.c	2018-12-04 18:23:00.000000000 +0100
+++ php-7.0.33/ext/session/mod_files.c	2024-05-14 10:23:50.940746029 +0200
@@ -284,8 +284,7 @@ static int ps_files_write(ps_files *data
 static int ps_files_cleanup_dir(const char *dirname, zend_long maxlifetime)
 {
 	DIR *dir;
-	char dentry[sizeof(struct dirent) + MAXPATHLEN];
-	struct dirent *entry = (struct dirent *) &dentry;
+	struct dirent *entry;
 	zend_stat_t sbuf;
 	char buf[MAXPATHLEN];
 	time_t now;
@@ -312,7 +311,7 @@ static int ps_files_cleanup_dir(const ch
 	memcpy(buf, dirname, dirname_len);
 	buf[dirname_len] = PHP_DIR_SEPARATOR;
 
-	while (php_readdir_r(dir, (struct dirent *) dentry, &entry) == 0 && entry) {
+	while ((entry = readdir(dir))) {
 		/* does the file start with our prefix? */
 		if (!strncmp(entry->d_name, FILE_PREFIX, sizeof(FILE_PREFIX) - 1)) {
 			size_t entry_len = strlen(entry->d_name);
diff -durpN php-7.0.33.orig/main/php_reentrancy.h php-7.0.33/main/php_reentrancy.h
--- php-7.0.33.orig/main/php_reentrancy.h	2018-12-04 18:22:44.000000000 +0100
+++ php-7.0.33/main/php_reentrancy.h	2024-05-14 10:23:50.941746038 +0200
@@ -51,13 +51,6 @@
 
 BEGIN_EXTERN_C()
 
-#if defined(HAVE_POSIX_READDIR_R)
-#define php_readdir_r readdir_r
-#else
-PHPAPI int php_readdir_r(DIR *dirp, struct dirent *entry,
-		struct dirent **result);
-#endif
-
 #if !defined(HAVE_LOCALTIME_R) && defined(HAVE_LOCALTIME)
 #define PHP_NEED_REENTRANCY 1
 PHPAPI struct tm *php_localtime_r(const time_t *const timep, struct tm *p_tm);
diff -durpN php-7.0.33.orig/main/php_scandir.c php-7.0.33/main/php_scandir.c
--- php-7.0.33.orig/main/php_scandir.c	2018-12-04 18:22:44.000000000 +0100
+++ php-7.0.33/main/php_scandir.c	2024-05-14 10:23:50.941746038 +0200
@@ -63,8 +63,7 @@ PHPAPI int php_scandir(const char *dirna
 	struct dirent **vector = NULL;
 	int vector_size = 0;
 	int nfiles = 0;
-	char entry[sizeof(struct dirent)+MAXPATHLEN];
-	struct dirent *dp = (struct dirent *)&entry;
+	struct dirent *dp;
 
 	if (namelist == NULL) {
 		return -1;
@@ -74,7 +73,7 @@ PHPAPI int php_scandir(const char *dirna
 		return -1;
 	}
 
-	while (!php_readdir_r(dirp, (struct dirent *)entry, &dp) && dp) {
+	while ((dp = readdir(dirp))) {
 		int dsize = 0;
 		struct dirent *newdp = NULL;
 
diff -durpN php-7.0.33.orig/main/reentrancy.c php-7.0.33/main/reentrancy.c
--- php-7.0.33.orig/main/reentrancy.c	2018-12-04 18:22:44.000000000 +0100
+++ php-7.0.33/main/reentrancy.c	2024-05-14 10:23:50.942746046 +0200
@@ -123,54 +123,6 @@ PHPAPI struct tm *php_gmtime_r(const tim
 
 #endif /* BEOS */
 
-#if !defined(HAVE_POSIX_READDIR_R)
-
-PHPAPI int php_readdir_r(DIR *dirp, struct dirent *entry,
-		struct dirent **result)
-{
-#if defined(HAVE_OLD_READDIR_R)
-	int ret = 0;
-
-	/* We cannot rely on the return value of readdir_r
-	   as it differs between various platforms
-	   (HPUX returns 0 on success whereas Solaris returns non-zero)
-	 */
-	entry->d_name[0] = '\0';
-	readdir_r(dirp, entry);
-
-	if (entry->d_name[0] == '\0') {
-		*result = NULL;
-		ret = errno;
-	} else {
-		*result = entry;
-	}
-	return ret;
-#else
-	struct dirent *ptr;
-	int ret = 0;
-
-	local_lock(READDIR_R);
-
-	errno = 0;
-
-	ptr = readdir(dirp);
-
-	if (!ptr && errno != 0)
-		ret = errno;
-
-	if (ptr)
-		memcpy(entry, ptr, sizeof(*ptr));
-
-	*result = ptr;
-
-	local_unlock(READDIR_R);
-
-	return ret;
-#endif
-}
-
-#endif
-
 #if !defined(HAVE_LOCALTIME_R) && defined(HAVE_LOCALTIME)
 
 PHPAPI struct tm *php_localtime_r(const time_t *const timep, struct tm *p_tm)
diff -durpN php-7.0.33.orig/main/streams/plain_wrapper.c php-7.0.33/main/streams/plain_wrapper.c
--- php-7.0.33.orig/main/streams/plain_wrapper.c	2018-12-04 18:22:44.000000000 +0100
+++ php-7.0.33/main/streams/plain_wrapper.c	2024-05-14 10:23:50.942746046 +0200
@@ -890,16 +890,15 @@ PHPAPI php_stream_ops	php_stream_stdio_o
 static size_t php_plain_files_dirstream_read(php_stream *stream, char *buf, size_t count)
 {
 	DIR *dir = (DIR*)stream->abstract;
-	/* avoid libc5 readdir problems */
-	char entry[sizeof(struct dirent)+MAXPATHLEN];
-	struct dirent *result = (struct dirent *)&entry;
+	struct dirent *result;
 	php_stream_dirent *ent = (php_stream_dirent*)buf;
 
 	/* avoid problems if someone mis-uses the stream */
 	if (count != sizeof(php_stream_dirent))
 		return 0;
 
-	if (php_readdir_r(dir, (struct dirent *)entry, &result) == 0 && result) {
+	result = readdir(dir);
+	if (result) {
 		PHP_STRLCPY(ent->d_name, result->d_name, sizeof(ent->d_name), strlen(result->d_name));
 		return sizeof(php_stream_dirent);
 	}
diff -durpN php-7.0.33.orig/win32/readdir.c php-7.0.33/win32/readdir.c
--- php-7.0.33.orig/win32/readdir.c	2018-12-04 18:22:44.000000000 +0100
+++ php-7.0.33/win32/readdir.c	2024-05-14 10:24:29.632087812 +0200
@@ -88,34 +88,6 @@ struct dirent *readdir(DIR *dp)
 	return &(dp->dent);
 }
 
-int readdir_r(DIR *dp, struct dirent *entry, struct dirent **result)
-{
-	if (!dp || dp->finished) {
-		*result = NULL;
-		return 0;
-	}
-
-	if (dp->offset != 0) {
-		if (FindNextFile(dp->handle, &(dp->fileinfo)) == 0) {
-			dp->finished = 1;
-			*result = NULL;
-			return 0;
-		}
-	}
-	dp->offset++;
-
-	strlcpy(dp->dent.d_name, dp->fileinfo.cFileName, _MAX_FNAME+1);
-	dp->dent.d_ino = 1;
-	dp->dent.d_reclen = (unsigned short)strlen(dp->dent.d_name);
-	dp->dent.d_off = dp->offset;
-
-	memcpy(entry, &dp->dent, sizeof(*entry));
-
-	*result = &dp->dent;
-
-	return 0;
-}
-
 int closedir(DIR *dp)
 {
 	if (!dp)
diff -durpN php-7.0.33.orig/win32/readdir.h php-7.0.33/win32/readdir.h
--- php-7.0.33.orig/win32/readdir.h	2018-12-04 18:22:44.000000000 +0100
+++ php-7.0.33/win32/readdir.h	2024-05-14 10:23:52.984764085 +0200
@@ -17,8 +17,6 @@
 #include <sys/types.h>
 #include <direct.h>
 
-#define php_readdir_r readdir_r
-
 /* struct dirent - same as Unix */
 
 struct dirent {
@@ -42,7 +40,6 @@ typedef struct {
 /* Function prototypes */
 DIR *opendir(const char *);
 struct dirent *readdir(DIR *);
-int readdir_r(DIR *, struct dirent *, struct dirent **);
 int closedir(DIR *);
 int rewinddir(DIR *);
 
