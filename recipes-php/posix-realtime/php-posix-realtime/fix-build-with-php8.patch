commit ab646ceedc4e58d6213a945260f509b2f47d3de1
Author: Zoltán Böszörményi <zboszor@pr.hu>
Date:   Wed Dec 16 08:27:08 2020 +0100

    Support PHP 8

diff --git a/posixrealtime.c b/posixrealtime.c
index 13c9a24..3d3c758 100644
--- a/posixrealtime.c
+++ b/posixrealtime.c
@@ -25,6 +25,7 @@
 #endif
 
 #include <stdint.h>
+#include <inttypes.h>
 
 #include <php.h>
 #include <php_ini.h>
@@ -38,6 +39,10 @@
  * Macros
  */
 
+#if PHP_MAJOR_VERSION >= 8
+#define TSRMLS_CC
+#endif
+
 #define BILLION_D   1000000000.0
 #define BILLION_LD  1000000000.0L
 #define FLOOR_TO_CLOCKRES -1
@@ -62,17 +67,13 @@ typedef enum {
 } ReturnType;
 
 
-/*
- * Static globals
- */
-
-static int le_posixrealtime;
-
 static char * timespec_to_string(struct timespec const * ts_p)
 {
+#if PHP_MAJOR_VERSION < 8
 #    ifdef ZTS
     TSRMLS_FETCH();
 #    endif
+#endif
 
     long decimal = ts_p->tv_nsec;
     size_t result_sz;
@@ -99,9 +100,11 @@ static char * timespec_to_string(struct timespec const * ts_p)
 #if PHP_MAJOR_VERSION < 7
 static zval * timespec_to_zval(struct timespec const * ts_p)
 {
+#if PHP_MAJOR_VERSION < 8
 #    ifdef ZTS
     TSRMLS_FETCH();
 #    endif
+#endif
     
     long nsec = ts_p->tv_nsec;
     zval * obj_p;
@@ -241,6 +244,12 @@ PHP_MINFO_FUNCTION(posixrealtime)
     php_info_print_table_end();
 }
 
+ZEND_BEGIN_ARG_INFO_EX(arginfo_clock_gettime, 0, 0, 3)
+    ZEND_ARG_INFO(0, value)
+    ZEND_ARG_INFO(0, value)
+    ZEND_ARG_INFO(0, value)
+ZEND_END_ARG_INFO()
+
 PHP_FUNCTION(posix_clock_gettime)
 {
     long clock_id = CLOCK_REALTIME;
@@ -290,9 +299,11 @@ PHP_FUNCTION(posix_clock_gettime)
         zval obj;
         long nsec;
 
+#if PHP_MAJOR_VERSION < 8
 #    ifdef ZTS
         TSRMLS_FETCH();
 #    endif
+#endif
 
         nsec = clock_val.tv_nsec;
 
@@ -303,7 +314,7 @@ PHP_FUNCTION(posix_clock_gettime)
             add_property_long(&obj, "tv_sec", clock_val.tv_sec);
         } else {
             char secstr[(size_t) (INTLEN(clock_val.tv_sec) + 1)];
-            snprintf(secstr, sizeof (secstr), "%d", clock_val.tv_sec);
+            snprintf(secstr, sizeof (secstr), "%" PRId64, (int64_t)clock_val.tv_sec);
             add_property_string(&obj, "tv_sec", secstr);
         }
 
@@ -334,10 +345,13 @@ PHP_FUNCTION(posix_clock_gettime)
     }
 }
 
+ZEND_BEGIN_ARG_INFO_EX(arginfo_clock_getres, 0, 0, 1)
+    ZEND_ARG_INFO(0, value)
+ZEND_END_ARG_INFO()
+
 PHP_FUNCTION(posix_clock_getres)
 {
     long clock_id = CLOCK_REALTIME;
-    double result;
     struct timespec clock_res;
 
     if (ZEND_NUM_ARGS() > 1) {
@@ -360,6 +374,10 @@ PHP_FUNCTION(posix_clock_getres)
     RETURN_LONG(clock_res.tv_nsec);
 }
 
+ZEND_BEGIN_ARG_INFO_EX(arginfo_is_clock_supported, 0, 0, 1)
+    ZEND_ARG_INFO(0, value)
+ZEND_END_ARG_INFO()
+
 PHP_FUNCTION(posix_is_clock_supported)
 {
     long clock_id;
@@ -383,9 +401,9 @@ PHP_FUNCTION(posix_is_clock_supported)
 
 
 const zend_function_entry posixrealtime_functions[] = {
-    PHP_FE(posix_clock_gettime, NULL)
-    PHP_FE(posix_clock_getres, NULL)
-    PHP_FE(posix_is_clock_supported, NULL)
+    PHP_FE(posix_clock_gettime, arginfo_clock_gettime)
+    PHP_FE(posix_clock_getres, arginfo_clock_getres)
+    PHP_FE(posix_is_clock_supported, arginfo_is_clock_supported)
     PHP_FE_END
 };
 
